clone:
  lfs: true

pipelines:
  default:
    - step:
        name: Build docker image
        services:
            - docker
        size: 2x
        script:
            - export TAG=$(git describe --exact-match || git show -s --format=%h)
            - echo git/docker tag is $TAG
            - export IMAGE="$DOCKER_HUB_USERNAME/ginan-cache:$TAG"
            - "git log --format=%B -n 1 | grep -c PEA > .skipPod || :"
            - "git log --format=%B -n 1 | grep -c POD > .skipPea || :"
            - if    [ `cat .skipPod` != 0 ] ; then 
            -       echo "BUILDING PEA..."
            -       docker build --build-arg TARGET=pea -t "$IMAGE" -f  ./docker/Dockerfile .
            - elif  [ `cat .skipPea` != 0 ] ; then 
            -       echo "BUILDING POD..."
            -       docker build --build-arg TARGET=pod -t "$IMAGE" -f  ./docker/Dockerfile .
            - else
            -       echo "BUILDING ALL"
            -       docker build -t "$IMAGE" -f ./docker/Dockerfile .
            - fi
            - docker login -u "$DOCKER_HUB_USERNAME" -p "$DOCKER_HUB_PASSWORD"
            - docker push "$IMAGE"
            - echo $TAG > .tag
        artifacts:
            - .tag
            - .skipPod
            - .skipPea
    - parallel:
        - step:
            name: PEA test 1 (GPS user ppp)
            script:
              - if [ `cat .skipPea` == 0 ] ; then
              - export TAG=$(cat .tag)
              - export IMAGE="$DOCKER_HUB_USERNAME/ginan-cache:$TAG"
              - docker run -e TAG -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION "$IMAGE" /ginan/docker/run-tests-pea.sh 1
              - fi
            services:
                - docker
            size: 2x
        - step:
            name: PEA test 2 (GNSS user ppp)
            script:
              - if [ `cat .skipPea` == 0 ] ; then
              - export TAG=$(cat .tag)
              - export IMAGE="$DOCKER_HUB_USERNAME/ginan-cache:$TAG"
              - docker run -e TAG -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION "$IMAGE" /ginan/docker/run-tests-pea.sh 2
              - fi
            services:
                - docker
            size: 2x
        - step:
            name: PEA test 3 (GPS user single freq)
            script:
              - if [ `cat .skipPea` == 0 ] ; then
              - export TAG=$(cat .tag)
              - export IMAGE="$DOCKER_HUB_USERNAME/ginan-cache:$TAG"
              - docker run -e TAG -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION "$IMAGE" /ginan/docker/run-tests-pea.sh 3
              - fi
            services:
                - docker
            size: 2x
        - step:
            name: PEA test 4 (GNSS user ambres)
            script:
              - if [ `cat .skipPea` == 0 ] ; then
              - export TAG=$(cat .tag)
              - export IMAGE="$DOCKER_HUB_USERNAME/ginan-cache:$TAG"
              - docker run -e TAG -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION "$IMAGE" /ginan/docker/run-tests-pea.sh 4
              - fi
            services:
                - docker
            size: 2x
        - step:
            name: PEA test 5 (realtime - needs auscors user/pass - skipped)
            script:
              - if [ `cat .skipPea` == 0 ] ; then
              - export TAG=$(cat .tag)
              - export IMAGE="$DOCKER_HUB_USERNAME/ginan-cache:$TAG"
              - docker run -e TAG -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION "$IMAGE" /ginan/docker/run-tests-pea.sh 5
              - fi
            services:
                - docker
            size: 2x
        - step:
            name: PEA test 6 (ionosphere)
            script:
              - if [ `cat .skipPea` == 0 ] ; then
              - export TAG=$(cat .tag)
              - export IMAGE="$DOCKER_HUB_USERNAME/ginan-cache:$TAG"
              - docker run -e TAG -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION "$IMAGE" /ginan/docker/run-tests-pea.sh 6
              - fi
            services:
                - docker
            size: 2x
        - step:
            name: PEA test 7 (GNSS network ppp ambres)
            script:
              - if [ `cat .skipPea` == 0 ] ; then
              - export TAG=$(cat .tag)
              - export IMAGE="$DOCKER_HUB_USERNAME/ginan-cache:$TAG"
              - docker run -e TAG -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION "$IMAGE" /ginan/docker/run-tests-pea.sh 7
              - fi
            services:
                - docker
            size: 2x
        - step:
            name: PEA test 8 (not working - skipped)
            script:
              - if [ `cat .skipPea` == 0 ] ; then
              - export TAG=$(cat .tag)
              - export IMAGE="$DOCKER_HUB_USERNAME/ginan-cache:$TAG"
              - docker run -e TAG -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION "$IMAGE" /ginan/docker/run-tests-pea.sh 8
              - fi
            services:
                - docker
            size: 2x
        - step:
            name: POD test 1 (GPS mode fit)
            script:
              - if [ `cat .skipPod` == 0 ] ; then
              -     export TAG=$(cat .tag)
              -     export IMAGE="$DOCKER_HUB_USERNAME/ginan-cache:$TAG"
              -     docker run -e TAG -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION "$IMAGE" /ginan/docker/run-tests-pod.sh 1
              - fi
            services:
                - docker
            size: 2x
        - step:
            name: POD test 2g (GPS mode fit)
            script:
              - if [ `cat .skipPod` == 0 ] ; then
              - export TAG=$(cat .tag)
              - export IMAGE="$DOCKER_HUB_USERNAME/ginan-cache:$TAG"
              - docker run -e TAG -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION "$IMAGE" /ginan/docker/run-tests-pod.sh 2g
              - fi
            services:
                - docker
            size: 2x
        - step:
            name: POD test 2r (GLONASS mode fit)
            script:
              - if [ `cat .skipPod` == 0 ] ; then
              - export TAG=$(cat .tag)
              - export IMAGE="$DOCKER_HUB_USERNAME/ginan-cache:$TAG"
              - docker run -e TAG -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION "$IMAGE" /ginan/docker/run-tests-pod.sh 2r
              - fi
            services:
                - docker
            size: 2x
        - step:
            name: POD test 2e (GALILEO mode fit)
            script:
              - if [ `cat .skipPod` == 0 ] ; then
              - export TAG=$(cat .tag)
              - export IMAGE="$DOCKER_HUB_USERNAME/ginan-cache:$TAG"
              - docker run -e TAG -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION "$IMAGE" /ginan/docker/run-tests-pod.sh 2e
              - fi
            services:
                - docker
            size: 2x
        - step:
            name: POD test 2c (BEIDOU mode fit)
            script:
              - if [ `cat .skipPod` == 0 ] ; then
              - export TAG=$(cat .tag)
              - export IMAGE="$DOCKER_HUB_USERNAME/ginan-cache:$TAG"
              - docker run -e TAG -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION "$IMAGE" /ginan/docker/run-tests-pod.sh 2c
              - fi
            services:
                - docker
            size: 2x
        - step:
            name: POD test 2j (QZSS mode fit)
            script:
              - if [ `cat .skipPod` == 0 ] ; then
              - export TAG=$(cat .tag)
              - export IMAGE="$DOCKER_HUB_USERNAME/ginan-cache:$TAG"
              - docker run -e TAG -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION "$IMAGE" /ginan/docker/run-tests-pod.sh 2j
              - fi
            services:
                - docker
            size: 2x
        - step:
            name: POD test 3 (GPS mode predict)
            script:
              - if [ `cat .skipPod` == 0 ] ; then
              - export TAG=$(cat .tag)
              - export IMAGE="$DOCKER_HUB_USERNAME/ginan-cache:$TAG"
              - docker run -e TAG -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION "$IMAGE" /ginan/docker/run-tests-pod.sh 3
              - fi
            services:
                - docker
            size: 2x
        - step:
            name: POD test 4 (GPS from init cond file)
            script:
              - if [ `cat .skipPod` == 0 ] ; then
              - export TAG=$(cat .tag)
              - export IMAGE="$DOCKER_HUB_USERNAME/ginan-cache:$TAG"
              - docker run -e TAG -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION "$IMAGE" /ginan/docker/run-tests-pod.sh 4
              - fi
            services:
                - docker
            size: 2x
        - step:
            name: POD test 5 (GPS mode fit 2)
            script:
              - if [ `cat .skipPod` == 0 ] ; then
              - export TAG=$(cat .tag)
              - export IMAGE="$DOCKER_HUB_USERNAME/ginan-cache:$TAG"
              - docker run -e TAG -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION "$IMAGE" /ginan/docker/run-tests-pod.sh 5
              - fi
            services:
                - docker
            size: 2x
        - step:
            name: POD test 6 (MEO mode fit)
            script:
              - if [ `cat .skipPod` == 0 ] ; then
              - export TAG=$(cat .tag)
              - export IMAGE="$DOCKER_HUB_USERNAME/ginan-cache:$TAG"
              - docker run -e TAG -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION "$IMAGE" /ginan/docker/run-tests-pod.sh 6
              - fi
            services:
                - docker
            size: 2x
        - step:
            name: Python scripts test
            script:
              - export TAG=$(cat .tag)
              - export IMAGE="$DOCKER_HUB_USERNAME/ginan-cache:$TAG"
              - docker run "$IMAGE" conda run -n gn37 pytest /ginan/scripts/tests
            services:
                - docker
            size: 2x
    - parallel:
        - step:
            name: Push docker image
            services:
                - docker
            size: 2x
            script:
                - export TAG=$(cat .tag)
                - export CACHE_IMAGE="$DOCKER_HUB_USERNAME/ginan-cache:$TAG"
                - export FINAL_IMAGE="$DOCKER_HUB_USERNAME/ginan"
                - docker pull "$CACHE_IMAGE"
                - docker login -u "$DOCKER_HUB_USERNAME" -p "$DOCKER_HUB_PASSWORD"
                - docker tag "$CACHE_IMAGE" "$FINAL_IMAGE:$TAG"
                - docker push "$FINAL_IMAGE:$TAG"
                - docker tag "$CACHE_IMAGE" "$FINAL_IMAGE:latest"
                - docker push "$FINAL_IMAGE:latest"
        - step:
            name: Build manual
            services:
                - docker
            size: 2x
            script:
                - export TAG=$(cat .tag)
                - export IMAGE="$DOCKER_HUB_USERNAME/ginan-env:latest"
                - export MANUAL="ginan-manual-$(date +"%Y-%m-%d")-$TAG.pdf"
                - docker pull "$IMAGE"
                - docker run -v "$PWD/docs/manual:/manual" "$IMAGE" bash -c "cd /manual; pdflatex main.tex; makeglossaries main; pdflatex main.tex; mv main.pdf $MANUAL"
                - docker run -v "$PWD/docs/manual:/manual" -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION amazon/aws-cli s3 cp "/manual/$MANUAL" "s3://ginan-manual/$MANUAL"

  custom:
    long-test:
      - step:
          name: Deploy long test EC2
          image: hashicorp/terraform:0.12.29
          services:
              - docker
          size: 2x
          script:
              - export TAG=$(git describe --exact-match || git show -s --format=%h)
              - echo git/docker tag is $TAG
              - export IMAGE="$DOCKER_HUB_USERNAME/ginan-cache:$TAG"
              - docker login -u "$DOCKER_HUB_USERNAME" -p "$DOCKER_HUB_PASSWORD"
              - |
                  if DOCKER_CLI_EXPERIMENTAL=enabled docker manifest inspect "$IMAGE" > /dev/null
                  then
                      echo "Image already exists, skipping build."
                  else
                      docker build -t "$IMAGE" -f ./docker/Dockerfile .
                      docker push "$IMAGE"
                  fi

              - cd aws/long-tests/
              - export TF_VAR_docker_image="$IMAGE"
              - terraform init
              - terraform plan
              - terraform apply -auto-approve

  tags:
    'release-*':
      - step:
          name: Release Tag into public GitHub
          image: atlassian/default-image:2
          script:
            - git branch master
            - git pull --squash  origin $BITBUCKET_TAG
            - git checkout -b branch-$BITBUCKET_TAG
            - git merge --squash master
            - python aws/msg_cleaner.py
            - rm -rf aws/
            - rm docker/README.md
            - rm bitbucket-pipelines.yml
            - git add .
            - git commit -m "$BITBUCKET_TAG"
            - git tag -d $BITBUCKET_TAG
            - git tag  $BITBUCKET_TAG
            - git remote add github_sync git@github.com:umma-zannat/ginan.git
            - git remote -v
            - git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
            - git show-ref
            - git remote rm origin
            - git rev-parse --verify master >> .git/info/grafts
            - git filter-branch -- --all
            - git push --force github_sync $BITBUCKET_TAG
            - git push --force github_sync branch-$BITBUCKET_TAG:main
            - git remote rm github_sync



definitions:
  services:
    docker:
      memory: 6000
